/**
 * Issue Template System for AI Code Review
 * Provides structured templates for different types of GitHub issues
 */
class IssueTemplateManager {
  constructor(config = {}) {
    this.config = config;
    this.templates = this.loadDefaultTemplates();
  }

  /**
   * Load default issue templates
   * @returns {Object} Default templates
   */
  loadDefaultTemplates() {
    return {
      // Security issue template
      security: {
        title: 'üö® Security Issue Detected - ${severity}',
        body: this.getSecurityTemplate(),
        labels: ['security', 'ai-review', 'severity-${severity}'],
        assignees: ['security-team'],
        priority: 'high'
      },

      // Performance issue template
      performance: {
        title: 'üêå Performance Issue - ${severity}',
        body: this.getPerformanceTemplate(),
        labels: ['performance', 'ai-review', 'severity-${severity}'],
        assignees: ['performance-team'],
        priority: 'medium'
      },

      // Code quality issue template
      quality: {
        title: 'üîç Code Quality Issue - ${severity}',
        body: this.getQualityTemplate(),
        labels: ['code-quality', 'ai-review', 'severity-${severity}'],
        assignees: ['dev-team'],
        priority: 'medium'
      },

      // Bug detection template
      bug: {
        title: 'üêõ Potential Bug Detected - ${severity}',
        body: this.getBugTemplate(),
        labels: ['bug', 'ai-review', 'severity-${severity}'],
        assignees: ['qa-team'],
        priority: 'high'
      },

      // Style/Convention template
      style: {
        title: 'üé® Code Style Issue - ${severity}',
        body: this.getStyleTemplate(),
        labels: ['style', 'ai-review', 'severity-${severity}'],
        assignees: ['dev-team'],
        priority: 'low'
      },

      // Architecture issue template
      architecture: {
        title: 'üèóÔ∏è Architecture Issue - ${severity}',
        body: this.getArchitectureTemplate(),
        labels: ['architecture', 'ai-review', 'severity-${severity}'],
        assignees: ['arch-team'],
        priority: 'high'
      },

      // Documentation issue template
      documentation: {
        title: 'üìö Documentation Issue - ${severity}',
        body: this.getDocumentationTemplate(),
        labels: ['documentation', 'ai-review', 'severity-${severity}'],
        assignees: ['docs-team'],
        priority: 'low'
      },

      // Test coverage template
      testing: {
        title: 'üß™ Testing Issue - ${severity}',
        body: this.getTestingTemplate(),
        labels: ['testing', 'ai-review', 'severity-${severity}'],
        assignees: ['qa-team'],
        priority: 'medium'
      }
    };
  }

  /**
   * Get security issue template
   * @returns {string} Security template body
   */
  getSecurityTemplate() {
    return `## üö® Security Issue Detected

### Issue Details
- **Severity:** \${severity}
- **Category:** Security
- **File:** \`\${file}\`
- **Line:** \${line || 'N/A'}
- **Type:** \${issueType || 'Security Vulnerability'}

### Description
\${description}

### Impact Assessment
- **Risk Level:** \${riskLevel || 'High'}
- **Affected Components:** \${affectedComponents || 'Multiple'}
- **Potential Exploitation:** \${exploitation || 'Possible'}

### Technical Details
\`\`\`\${language || 'text'}
\${codeSnippet || 'Code snippet not available'}
\`\`\`

### Recommendations
1. **Immediate Action:** \${immediateAction || 'Review and fix immediately'}
2. **Best Practices:** \${bestPractices || 'Follow security coding guidelines'}
3. **Testing:** \${testing || 'Add security tests for this scenario'}

### References
- **CWE:** \${cwe || 'N/A'}
- **OWASP:** \${owasp || 'N/A'}
- **Security Guidelines:** \${guidelines || 'N/A'}

### Review Information
- **AI Model:** \${aiModel || 'GPT-4'}
- **Review Date:** \${reviewDate || new Date().toISOString()}
- **Repository:** \${repository || 'N/A'}
- **Branch:** \${branch || 'N/A'}

---
*This issue was automatically generated by the AI Code Review System*`;
  }

  /**
   * Get performance issue template
   * @returns {string} Performance template body
   */
  getPerformanceTemplate() {
    return `## üêå Performance Issue Detected

### Issue Details
- **Severity:** \${severity}
- **Category:** Performance
- **File:** \`\${file}\`
- **Line:** \${line || 'N/A'}
- **Type:** \${issueType || 'Performance Bottleneck'}

### Description
\${description}

### Performance Impact
- **Current Performance:** \${currentPerformance || 'Unknown'}
- **Expected Performance:** \${expectedPerformance || 'Optimized'}
- **Impact Level:** \${impactLevel || 'Medium'}

### Technical Details
\`\`\`\${language || 'text'}
\${codeSnippet || 'Code snippet not available'}
\`\`\`

### Optimization Suggestions
1. **Algorithm Improvement:** \${algorithmSuggestion || 'Consider more efficient algorithms'}
2. **Data Structure:** \${dataStructureSuggestion || 'Optimize data structures'}
3. **Caching Strategy:** \${cachingSuggestion || 'Implement appropriate caching'}
4. **Resource Management:** \${resourceSuggestion || 'Optimize resource usage'}

### Performance Metrics
- **Time Complexity:** \${timeComplexity || 'N/A'}
- **Space Complexity:** \${spaceComplexity || 'N/A'}
- **Memory Usage:** \${memoryUsage || 'N/A'}

### Review Information
- **AI Model:** \${aiModel || 'GPT-4'}
- **Review Date:** \${reviewDate || new Date().toISOString()}
- **Repository:** \${repository || 'N/A'}
- **Branch:** \${branch || 'N/A'}

---
*This issue was automatically generated by the AI Code Review System*`;
  }

  /**
   * Get code quality template
   * @returns {string} Quality template body
   */
  getQualityTemplate() {
    return `## üîç Code Quality Issue Detected

### Issue Details
- **Severity:** \${severity}
- **Category:** Code Quality
- **File:** \`\${file}\`
- **Line:** \${line || 'N/A'}
- **Type:** \${issueType || 'Code Quality Issue'}

### Description
\${description}

### Quality Metrics
- **Maintainability:** \${maintainability || 'N/A'}
- **Readability:** \${readability || 'N/A'}
- **Complexity:** \${complexity || 'N/A'}

### Technical Details
\`\`\`\${language || 'text'}
\${codeSnippet || 'Code snippet not available'}
\`\`\`

### Improvement Suggestions
1. **Code Structure:** \${structureSuggestion || 'Improve code organization'}
2. **Naming Conventions:** \${namingSuggestion || 'Follow naming conventions'}
3. **Documentation:** \${docSuggestion || 'Add proper documentation'}
4. **Error Handling:** \${errorHandlingSuggestion || 'Improve error handling'}

### Best Practices
- **SOLID Principles:** \${solidPrinciples || 'N/A'}
- **Design Patterns:** \${designPatterns || 'N/A'}
- **Coding Standards:** \${codingStandards || 'N/A'}

### Review Information
- **AI Model:** \${aiModel || 'GPT-4'}
- **Review Date:** \${reviewDate || new Date().toISOString()}
- **Repository:** \${repository || 'N/A'}
- **Branch:** \${branch || 'N/A'}

---
*This issue was automatically generated by the AI Code Review System*`;
  }

  /**
   * Get bug detection template
   * @returns {string} Bug template body
   */
  getBugTemplate() {
    return `## üêõ Potential Bug Detected

### Issue Details
- **Severity:** \${severity}
- **Category:** Bug Detection
- **File:** \`\${file}\`
- **Line:** \${line || 'N/A'}
- **Type:** \${issueType || 'Potential Bug'}

### Description
\${description}

### Bug Analysis
- **Bug Type:** \${bugType || 'Logic Error'}
- **Trigger Conditions:** \${triggerConditions || 'Unknown'}
- **Expected Behavior:** \${expectedBehavior || 'N/A'}
- **Actual Behavior:** \${actualBehavior || 'N/A'}

### Technical Details
\`\`\`\${language || 'text'}
\${codeSnippet || 'Code snippet not available'}
\`\`\`

### Potential Issues
1. **Logic Flaws:** \${logicFlaws || 'Potential logical errors'}
2. **Edge Cases:** \${edgeCases || 'Unhandled edge cases'}
3. **Input Validation:** \${inputValidation || 'Missing input validation'}
4. **Error Handling:** \${errorHandling || 'Inadequate error handling'}

### Testing Recommendations
- **Unit Tests:** \${unitTestSuggestion || 'Add unit tests'}
- **Integration Tests:** \${integrationTestSuggestion || 'Add integration tests'}
- **Edge Case Testing:** \${edgeCaseSuggestion || 'Test edge cases'}

### Review Information
- **AI Model:** \${aiModel || 'GPT-4'}
- **Review Date:** \${reviewDate || new Date().toISOString()}
- **Repository:** \${repository || 'N/A'}
- **Branch:** \${branch || 'N/A'}

---
*This issue was automatically generated by the AI Code Review System*`;
  }

  /**
   * Get style issue template
   * @returns {string} Style template body
   */
  getStyleTemplate() {
    return `## üé® Code Style Issue Detected

### Issue Details
- **Severity:** \${severity}
- **Category:** Code Style
- **File:** \`\${file}\`
- **Line:** \${line || 'N/A'}
- **Type:** \${issueType || 'Style Violation'}

### Description
\${description}

### Style Violations
- **Formatting Issues:** \${formattingIssues || 'N/A'}
- **Naming Conventions:** \${namingIssues || 'N/A'}
- **Code Organization:** \${organizationIssues || 'N/A'}

### Technical Details
\`\`\`\${language || 'text'}
\${codeSnippet || 'Code snippet not available'}
\`\`\`

### Style Guidelines
1. **Indentation:** \${indentationGuideline || 'Follow consistent indentation'}
2. **Spacing:** \${spacingGuideline || 'Use consistent spacing'}
3. **Naming:** \${namingGuideline || 'Follow naming conventions'}
4. **Structure:** \${structureGuideline || 'Organize code logically'}

### Tools and Linters
- **ESLint Rules:** \${eslintRules || 'N/A'}
- **Prettier Config:** \${prettierConfig || 'N/A'}
- **Style Guide:** \${styleGuide || 'N/A'}

### Review Information
- **AI Model:** \${aiModel || 'GPT-4'}
- **Review Date:** \${reviewDate || new Date().toISOString()}
- **Repository:** \${repository || 'N/A'}
- **Branch:** \${branch || 'N/A'}

---
*This issue was automatically generated by the AI Code Review System*`;
  }

  /**
   * Get architecture issue template
   * @returns {string} Architecture template body
   */
  getArchitectureTemplate() {
    return `## üèóÔ∏è Architecture Issue Detected

### Issue Details
- **Severity:** \${severity}
- **Category:** Architecture
- **File:** \`\${file}\`
- **Line:** \${line || 'N/A'}
- **Type:** \${issueType || 'Architectural Concern'}

### Description
\${description}

### Architectural Impact
- **System Design:** \${systemDesign || 'N/A'}
- **Scalability:** \${scalability || 'N/A'}
- **Maintainability:** \${maintainability || 'N/A'}
- **Performance:** \${performance || 'N/A'}

### Technical Details
\`\`\`\${language || 'text'}
\${codeSnippet || 'Code snippet not available'}
\`\`\`

### Design Principles
1. **SOLID Principles:** \${solidPrinciples || 'N/A'}
2. **Design Patterns:** \${designPatterns || 'N/A'}
3. **Separation of Concerns:** \${separationOfConcerns || 'N/A'}
4. **Dependency Management:** \${dependencyManagement || 'N/A'}

### Recommendations
- **Refactoring:** \${refactoringSuggestion || 'Consider refactoring'}
- **Pattern Application:** \${patternSuggestion || 'Apply appropriate patterns'}
- **Modularization:** \${modularizationSuggestion || 'Improve modularity'}

### Review Information
- **AI Model:** \${aiModel || 'GPT-4'}
- **Review Date:** \${reviewDate || new Date().toISOString()}
- **Repository:** \${repository || 'N/A'}
- **Branch:** \${branch || 'N/A'}

---
*This issue was automatically generated by the AI Code Review System*`;
  }

  /**
   * Get documentation issue template
   * @returns {string} Documentation template body
   */
  getDocumentationTemplate() {
    return `## üìö Documentation Issue Detected

### Issue Details
- **Severity:** \${severity}
- **Category:** Documentation
- **File:** \`\${file}\`
- **Line:** \${line || 'N/A'}
- **Type:** \${issueType || 'Documentation Issue'}

### Description
\${description}

### Documentation Gaps
- **Missing Documentation:** \${missingDocs || 'N/A'}
- **Outdated Information:** \${outdatedInfo || 'N/A'}
- **Unclear Explanations:** \${unclearExplanations || 'N/A'}

### Technical Details
\`\`\`\${language || 'text'}
\${codeSnippet || 'Code snippet not available'}
\`\`\`

### Documentation Standards
1. **API Documentation:** \${apiDocStandards || 'N/A'}
2. **Code Comments:** \${commentStandards || 'N/A'}
3. **README Files:** \${readmeStandards || 'N/A'}
4. **Inline Documentation:** \${inlineDocStandards || 'N/A'}

### Improvement Suggestions
- **Add Comments:** \${addComments || 'Add explanatory comments'}
- **Update README:** \${updateReadme || 'Update documentation'}
- **API Documentation:** \${apiDocumentation || 'Document API endpoints'}
- **Examples:** \${examples || 'Add usage examples'}

### Review Information
- **AI Model:** \${aiModel || 'GPT-4'}
- **Review Date:** \${reviewDate || new Date().toISOString()}
- **Repository:** \${repository || 'N/A'}
- **Branch:** \${branch || 'N/A'}

---
*This issue was automatically generated by the AI Code Review System*`;
  }

  /**
   * Get testing issue template
   * @returns {string} Testing template body
   */
  getTestingTemplate() {
    return `## üß™ Testing Issue Detected

### Issue Details
- **Severity:** \${severity}
- **Category:** Testing
- **File:** \`\${file}\`
- **Line:** \${line || 'N/A'}
- **Type:** \${issueType || 'Testing Issue'}

### Description
\${description}

### Testing Coverage
- **Current Coverage:** \${currentCoverage || 'N/A'}
- **Target Coverage:** \${targetCoverage || 'N/A'}
- **Missing Tests:** \${missingTests || 'N/A'}

### Technical Details
\`\`\`\${language || 'text'}
\${codeSnippet || 'Code snippet not available'}
\`\`\`

### Testing Recommendations
1. **Unit Tests:** \${unitTestRecommendation || 'Add unit tests'}
2. **Integration Tests:** \${integrationTestRecommendation || 'Add integration tests'}
3. **Edge Case Testing:** \${edgeCaseRecommendation || 'Test edge cases'}
4. **Performance Tests:** \${performanceTestRecommendation || 'Add performance tests'}

### Test Types Needed
- **Positive Testing:** \${positiveTesting || 'Test valid inputs'}
- **Negative Testing:** \${negativeTesting || 'Test invalid inputs'}
- **Boundary Testing:** \${boundaryTesting || 'Test boundary conditions'}
- **Regression Testing:** \${regressionTesting || 'Prevent regressions'}

### Review Information
- **AI Model:** \${aiModel || 'GPT-4'}
- **Review Date:** \${reviewDate || new Date().toISOString()}
- **Repository:** \${repository || 'N/A'}
- **Branch:** \${branch || 'N/A'}

---
*This issue was automatically generated by the AI Code Review System*`;
  }

  /**
   * Generate issue data from template
   * @param {string} templateType - Template type to use
   * @param {Object} data - Data to populate template
   * @returns {Object} Generated issue data
   */
  generateIssue(templateType, data) {
    const template = this.templates[templateType];
    if (!template) {
      throw new Error(`Unknown template type: ${templateType}`);
    }

    // Process template with data
    const processedTemplate = this.processTemplate(template, data);

    return {
      title: processedTemplate.title,
      body: processedTemplate.body,
      labels: processedTemplate.labels,
      assignees: processedTemplate.assignees,
      priority: processedTemplate.priority,
      template: templateType
    };
  }

  /**
   * Process template with data
   * @param {Object} template - Template object
   * @param {Object} data - Data to populate
   * @returns {Object} Processed template
   */
  processTemplate(template, data) {
    const processed = { ...template };
    
    // Process title
    processed.title = this.interpolateString(template.title, data);
    
    // Process body
    processed.body = this.interpolateString(template.body, data);
    
    // Process labels
    processed.labels = template.labels.map(label => 
      this.interpolateString(label, data)
    );
    
    // Process assignees
    processed.assignees = template.assignees.map(assignee => 
      this.interpolateString(assignee, data)
    );
    
    return processed;
  }

  /**
   * Interpolate string with data
   * @param {string} str - String to interpolate
   * @param {Object} data - Data to use
   * @returns {string} Interpolated string
   */
  interpolateString(str, data) {
    return str.replace(/\$\{([^}]+)\}/g, (match, key) => {
      return data[key] || match;
    });
  }

  /**
   * Get available template types
   * @returns {Array} Array of template types
   */
  getAvailableTemplates() {
    return Object.keys(this.templates);
  }

  /**
   * Add custom template
   * @param {string} name - Template name
   * @param {Object} template - Template object
   */
  addCustomTemplate(name, template) {
    this.templates[name] = template;
  }

  /**
   * Remove template
   * @param {string} name - Template name
   */
  removeTemplate(name) {
    if (this.templates[name]) {
      delete this.templates[name];
    }
  }

  /**
   * Get template configuration
   * @returns {Object} Template configuration
   */
  getTemplateConfig() {
    return {
      available: this.getAvailableTemplates(),
      count: Object.keys(this.templates).length,
      custom: Object.keys(this.templates).filter(name => 
        !['security', 'performance', 'quality', 'bug', 'style', 'architecture', 'documentation', 'testing'].includes(name)
      )
    };
  }
}

module.exports = IssueTemplateManager;


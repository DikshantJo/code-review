name: Automated Testing Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - e2e
        - performance
        - coverage

env:
  NODE_VERSION: '18'
  NPM_CACHE_DIR: ~/.npm
  TEST_RESULTS_DIR: test-results
  COVERAGE_DIR: coverage

jobs:
  # Job 1: Unit Tests (Fastest, runs first)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: ${{ env.TEST_RESULTS_DIR }}
        retention-days: 7
        
    - name: Upload coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-coverage
        path: ${{ env.COVERAGE_DIR }}
        retention-days: 30

  # Job 2: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: ${{ env.TEST_RESULTS_DIR }}
        retention-days: 7

  # Job 3: End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run end-to-end tests
      run: npm run test:e2e
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: ${{ env.TEST_RESULTS_DIR }}
        retention-days: 7

  # Job 4: Performance Tests (Longest running)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: e2e-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: npm run test:performance
      
    - name: Generate performance report
      run: npm run test:perf
      
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          ${{ env.TEST_RESULTS_DIR }}
          performance-test-report.json
        retention-days: 30

  # Job 5: Test Coverage Analysis
  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [unit-tests, integration-tests, e2e-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run coverage tests
      run: npm run test:coverage
      
    - name: Generate coverage report
      run: npm run test:coverage -- --coverageReporters=text --coverageReporters=lcov --coverageReporters=html
      
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: ${{ env.COVERAGE_DIR }}
        retention-days: 30
        
    - name: Check coverage thresholds
      run: |
        COVERAGE=$(npm run test:coverage -- --coverageReporters=text | grep -E "All files.*\d+%" | grep -o "\d+%" | head -1 | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        if [ "$COVERAGE" -lt 80 ]; then
          echo "❌ Coverage below 80% threshold"
          exit 1
        else
          echo "✅ Coverage above 80% threshold"
        fi

  # Job 6: Security and Quality Checks
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Check code formatting
      run: npm run format:check
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for outdated dependencies
      run: npm outdated || true

  # Job 7: Test Results Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, coverage-analysis, quality-checks]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: all-test-results
        
    - name: Generate test summary
      run: |
        echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Test Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job statuses
        if [ "${{ needs.unit-tests.result }}" == "success" ]; then
          echo "✅ **Unit Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Unit Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "✅ **Integration Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Integration Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "✅ **End-to-End Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **End-to-End Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.performance-tests.result }}" == "success" ]; then
          echo "✅ **Performance Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Performance Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.coverage-analysis.result }}" == "success" ]; then
          echo "✅ **Coverage Analysis**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Coverage Analysis**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.quality-checks.result }}" == "success" ]; then
          echo "✅ **Quality Checks**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Quality Checks**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📈 Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Try to extract coverage information
        if [ -f "all-test-results/coverage-report/lcov-report/index.html" ]; then
          echo "📊 Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
          echo "🔗 View detailed coverage in artifacts" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.unit-tests.result }}" == "success" ] && \
           [ "${{ needs.integration-tests.result }}" == "success" ] && \
           [ "${{ needs.e2e-tests.result }}" == "success" ] && \
           [ "${{ needs.performance-tests.result }}" == "success" ] && \
           [ "${{ needs.coverage-analysis.result }}" == "success" ] && \
           [ "${{ needs.quality-checks.result }}" == "success" ]; then
          echo "🎉 **All tests passed!** Ready for deployment." >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Some tests failed.** Please review the results and fix issues before proceeding." >> $GITHUB_STEP_SUMMARY
        fi

  # Job 8: Notifications
  notifications:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Send test results notification
      run: |
        # This would integrate with your notification system
        # For now, just log the status
        echo "Test pipeline completed with status: ${{ needs.test-summary.result }}"
        
        # You could add email notifications, Slack messages, etc. here
        # npm run notify -- --status="${{ needs.test-summary.result }}" --results="all-test-results"
